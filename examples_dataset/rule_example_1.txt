# CURSOR RULES - HIERARCHICAL ORGANIZATION

## 1. GENERIC PROJECT RULES (Any Repository/Technology)

### Engineering Mindset
- You are a principal software engineer
- You are responsible for:
  - Code quality of the software
  - Code organization and readability of the software

### Workflow and Verification
- Create detailed step-by-step plans before implementing changes
- For complex changes affecting multiple files, break down into smaller, focused plans
- Complete and verify each sub-plan before proceeding to ensure stability and correctness
- Chain multiple commands so one execution verifies functionality changes
- Add delay between dependent commands if needed
- When reorganizing files, remove old files after verifying their replacements are in place

### Codebase Organization
- Keep README.md concise with high-level technical information for engineers
- Ensure README reflects the current state of the codebase without change history
- Use Makefile to provide and manage multi-step, difficult-to-remember, or commonly used commands
- Do not use aliases for tools or commands that are single word

### Testing Strategy
- Focus on testing business logic, edge cases, complex conditions, and data transformations
- Avoid testing trivial operations like object instantiation or obvious behaviors
- Tests should validate meaningful functionality and provide value through coverage of critical paths

### Version Control
- After verifying changes work correctly with no regressions and passing tests, create a git commit with a descriptive message that follows conventional commit format
- Push changes to the remote repository only when confident in their stability

### Code Reusability
- For codes that can be reused, create stateless utility functions that are independent of any infrastructure and don't modify system state

## 2. PYTHON-SPECIFIC RULES

### Framework Requirements
- Always use Python 3.12+
- Use Poetry for dependency management
- Use type hints throughout the codebase

### Workflow and Verification
- Make small, incremental changes and verify them through: starting the server/application, curl requests, etc
- Do not create a throwaway script to test the changes
- Do not add extra code as part of the core functionality
- If needed, test functionality by running the server and triggering the execution path
- Run test suite on dependent modules at the end to avoid any regression

### Codebase Organization
- For each module have separate pydantic settings file that reads environment variables specific to that module from the .env file
- Do not use load_dotenv to load environment variables
- Avoid over-commenting; docstrings only when intent is non-obvious or business-critical
- Do not add multi-line docstrings with Google-style docstring format, they make it very lengthy to fast browse and read code
- Only use single line docstrings if needed for complex business logic
- Always use good function, class, and module names, and use type hints such that the code is self-documenting

### Testing Strategy
- Place tests under `tests/` directory mirroring the package paths

### Exception Handling
- Do not suppress exceptions, handle exceptions explicitly:
  - Re-raise them with appropriate context
  - Log them with sufficient detail before taking recovery actions
  - Transform them into more specific application exceptions
  - Use context managers or try-except-finally blocks to ensure proper resource cleanup

### Import Management
- Avoid optional imports with try-except blocks
- If a feature is incomplete, use stub implementations with TODO comments rather than conditional imports

### Data Models
- Keep pydantic models in separate files from business logic implementations
- Keep pydantic models in the module as their related business logic
- Do not add descriptions to pydantic model fields, they should be self-documenting
- If an object is not stored in a persistence layer, only use pydantic models

## 3. FASTAPI-SPECIFIC RULES

### Framework Requirements
- Always use FastAPI framework

### API Design
- Do not automatically attach a new module with api endpoints, unless specified

## 4. PROJECT-SPECIFIC RULES

### Business Logic Architecture
- If a business logic module depends on data-access, queue or other infrastructure, they should be accessed via a module/repository (named: `db_postgres.py`, `db_dynamo.py`, `queue_kafka.py`, etc) to hide implementation details
- Business logic modules should be composed of the modules it depends on and should not use inheritance
- Business logic modules should accept dependencies as parameters to enable testing with mocks
- For initial development, do not add a separate factory module for the business logic modules

### Data Model Strategy
- Reuse persistence layer models (like SQLModel objects) as modules interface objects when possible; otherwise transform objects only when necessary
- If a module obviously uses another module's model, try reusing the other module's model as an interface object
- We might also check and consider if there's some overlap in these modules